<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-4.1.xsd">

    <global-method-security pre-post-annotations="enabled"/>

    <!-- 不用权限管理的资源路径 -->
    <http pattern="/index.html" security="none"/>
    <http pattern="/#/manage/login" security="none"/>
  <!--  <http pattern="/api/app/getLivePlayUrl" security="none"/>-->

    <http use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint" auto-config="false">
        <custom-filter ref="myLogoutFilter" position="LOGOUT_FILTER"/>
        <session-management session-authentication-strategy-ref="sessionAuthenticationStrategy"
                            invalid-session-url="/#/manage/login"/>
        <custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter"/>
        <custom-filter ref="ajaxLoginFilter" position="FORM_LOGIN_FILTER"/>
        <!-- 使用自定义的过滤器 -->
        <custom-filter ref="myFilterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>

        <intercept-url pattern="/api/app/**" access="permitAll"/>
        <intercept-url pattern="/api/manage/**" access="isAuthenticated()"/>
        <csrf disabled="true"></csrf>
    </http>

    <authentication-manager alias="myAuthenticationManager">
        <authentication-provider>
            <user-service>
                <user name="admin" password="Sh02160497730" authorities="ROLE_ADMIN"/>
            </user-service>
        </authentication-provider>
    </authentication-manager>

    <!-- 配置manage登录入口点 -->
    <beans:bean id="authenticationProcessingFilterEntryPoint" class="com.wizinno.shuhao.security.MyLoginUrlAuthenticationEntryPoint">
        <beans:property name="loginFormUrl" value="/index.html"/>
        <!-- 是否强制HTTPS -->
        <beans:property name="forceHttps" value="true"/>
        <beans:property name="useForward" value="true"/>
    </beans:bean>

    <beans:bean id="sessionAuthenticationStrategy"
                class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
        <beans:constructor-arg name="sessionRegistry" ref="sessionRegistry"/>
        <beans:property name="maximumSessions" value="1000"/>
        <beans:property name="exceptionIfMaximumExceeded" value="true"/>
    </beans:bean>

    <beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>

    <!-- 用户的密码加密方式 -->
    <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <beans:bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
        <beans:property name="userPropertyToUse" value="username"/>
    </beans:bean>

    <beans:bean id="myAccessDecisionManager" class="com.wizinno.shuhao.security.MyAccessDecisionManager"/>

    <!-- sessionManagementFilter -->
    <beans:bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <beans:constructor-arg index="0" ref="sessionRegistry"/>
        <beans:constructor-arg index="1" value="/#/manage/login"/>
    </beans:bean>

    <!-- 验证ajax请求-->
    <beans:bean id="ajaxLoginFilter" init-method="init" class="com.wizinno.shuhao.security.AjaxUsernamePasswordAuthenticationFilter">
        <beans:property name="authenticationManager" ref="myAuthenticationManager"/>
        <beans:property name="successHandler" ref="ajaxSuccessHandler"/>
        <beans:property name="failureHandler" ref="ajaxFailureHandler"/>
        <beans:property name="username" value="username"/>
        <beans:property name="password" value="password"/>
        <beans:property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy"/>
        <beans:property name="myRequestMatcher" ref="loginRequestMatcher"/>
    </beans:bean>

    <beans:bean id="myLogoutFilter" class="com.wizinno.shuhao.security.MyLogoutFilter">
        <beans:property name="logoutRequestMatcher" ref="logoutRequestMatcher"/>
        <!-- 退出处理成功后的默认显示url -->
        <beans:constructor-arg index="0" ref="logoutSuccessHandler"/>
        <beans:constructor-arg index="1">
            <!-- 退出成功后的handler列表 -->
            <beans:array>
                <beans:bean id="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
                <!-- 加入了开发人员自定义的退出成功处理 -->
            </beans:array>
        </beans:constructor-arg>
    </beans:bean>

    <beans:bean id="logoutSuccessHandler" class="com.wizinno.shuhao.security.MyLogoutSuccessHandler">
        <beans:property name="defaultTargetUrl" value="/#/manage/login"/>
    </beans:bean>

    <beans:bean id="ajaxSuccessHandler"
                class="com.wizinno.shuhao.security.MyAjaxAuthenticationSuccessHandler"/>
    <beans:bean id="ajaxFailureHandler" class="com.wizinno.shuhao.security.MyAjaxAuthenticationFailureHandler">
        <beans:property name="forwardToDestination" value="false"/>
        <beans:property name="defaultFailureUrl" value="/#/manage/login"/>
    </beans:bean>

    <beans:bean id="myFilterSecurityInterceptor" class="com.wizinno.shuhao.security.MyFilterSecurityInterceptor"/>
    <beans:bean id="myInvocationSecurityMetadataSource" class="com.wizinno.shuhao.security.MyInvocationSecurityMetadataSource"/>

    <beans:bean id="loginRequestMatcher" class="com.wizinno.shuhao.security.MyRequestMatcher">
        <beans:property name="filterProcessesUrl" value="/api/manage/login"/>
    </beans:bean>
    <beans:bean id="logoutRequestMatcher" class="com.wizinno.shuhao.security.MyRequestMatcher">
        <beans:property name="filterProcessesUrl" value="/api/manage/logout"/>
    </beans:bean>
</beans:beans>